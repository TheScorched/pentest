import socket
import threading
import tkinter as tk
from tkinter import messagebox

class PortScanner:
    def __init__(self, master):
        self.master = master
        self.master.title("Port Scanner")
        self.master.geometry("300x200")

        self.ip_label = tk.Label(master, text="Enter Target IP:")
        self.ip_label.pack()

        self.ip_entry = tk.Entry(master, width=30)
        self.ip_entry.pack()

        self.port_label = tk.Label(master, text="Select Ports to Scan:")
        self.port_label.pack()

        self.port_entry = tk.Entry(master, width=30)
        self.port_entry.pack()

        self.all_ports_var = tk.IntVar()
        self.all_ports_checkbox = tk.Checkbutton(master, text="Scan All Ports", variable=self.all_ports_var)
        self.all_ports_checkbox.pack()

        self.scan_button = tk.Button(master, text="Scan", command=self.start_scan)
        self.scan_button.pack()

    def start_scan(self):
        target_ip = self.ip_entry.get()
        if not target_ip:
            messagebox.showerror("Error", "Enter a valid target IP")
            return

        ports = []
        if self.all_ports_var.get():
            ports = list(range(1, 65536))
        else:
            port_range = self.port_entry.get()
            if "-" in port_range:
                start, end = map(int, port_range.split("-"))
                ports = list(range(start, end+1))
            else:
                ports = [int(port_range)]

        self.scan(target_ip, ports)

    def scan(self, target_ip, ports):
        open_ports = []
        for port in ports:
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(1)
                result = sock.connect_ex((target_ip, port))
                if result == 0:
                    open_ports.append(port)
            except socket.error:
                pass
        messagebox.showinfo("Scan Results", f"Open ports: {open_ports}")

root = tk.Tk()
app = PortScanner(root)
root.mainloop()

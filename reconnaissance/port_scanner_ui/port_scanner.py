import socket
import threading
import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk
import csv
import json

class PortScanner:
    def __init__(self, master):
        self.master = master
        self.master.title("Port Scanner")
        self.master.geometry("300x250")
        self.master.config(background='#333333')

        self.ip_label = tk.Label(master, text="Enter Target IP:", fg='white', bg='#333333')
        self.ip_label.pack()

        self.ip_entry = tk.Entry(master, width=30)
        self.ip_entry.pack()

        self.port_label = tk.Label(master, text="Select Ports to Scan:", fg='white', bg='#333333')
        self.port_label.pack()

        self.port_entry = tk.Entry(master, width=30)
        self.port_entry.pack()

        self.all_ports_var = tk.IntVar()
        self.all_ports_checkbox = tk.Checkbutton(master, text="Scan All Ports", variable=self.all_ports_var, fg='white', bg='#333333')
        self.all_ports_checkbox.pack()

        self.output_label = tk.Label(master, text="Enter output path:", fg='white', bg='#333333')
        self.output_label.pack()
        self.output_entry = tk.Entry(master, width=30)
        self.output_entry.pack()

        self.scan_button = tk.Button(master, text="Scan", command=self.start_scan, fg='white', bg='#33355555')
        self.scan_button.pack()

        skull_image_pil = Image.open('path_to_your_skull_image.png')
        skull_image_tk = ImageTk.PhotoImage(skull_image_pil)
        skull_label = tk.Label(self.master, image=skull_image_tk)
        skull_image_tk.keep_ref()
        skull_label.image = skull_image_tk
        skull_label.pack(side=tk.TOP)

    def start_scan(self):
        target_ip = self.ip_entry.get()
        if not target_ip:
            messagebox.showerror("Error", "Enter a valid target IP")
            return

        ports = []
        port_range = self.port_entry.get()
        if "," in port_range:
            ports = [int(port) for port in port_range.split(",")]
        else:
            if "-" in port_range:
                start, end = map(int, port_range.split("-"))
                ports = list(range(start, end+1))
            else:
                ports = [int(port_range)]

        output_path = self.output_entry.get()
        open_ports = []
        for port in ports:
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(1)
                result = sock.connect_ex((target_ip, port))
                if result == 0:
                    open_ports.append(port)
            except socket.error:
                pass
        messagebox.showinfo("Scan Results", f"Open ports: {open_ports}")

        with open(f"{output_path}/portscan_results.csv", 'w', newline='') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow(['Port', 'Status'])
            for port in open_ports:
                writer.writerow([port, 'Open'])

        with open(f"{output_path}/portscan_results.json", 'w') as jsonfile:
            json.dump({'portscan': [{'port': port, 'status': 'Open'} for port in open_ports]}, jsonfile)

root = tk.Tk()
app = PortScanner(root)
root.mainloop()
